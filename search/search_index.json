{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Cerify is an advanced blockchain-based platform designed for analyzing, verifying, and certifying smart contracts. It leverages cutting-edge technologies to empower developers and organizations with tools to ensure the security and reliability of their blockchain applications. By enabling users to upload Solidity files, Cerify performs a detailed security assessment and generates insightful reports.</p>"},{"location":"#vision-and-mission","title":"Vision and Mission","text":"<ul> <li>Vision: To establish trust and transparency in blockchain ecosystems through robust smart contract verification.</li> <li>Mission: To empower developers with seamless tools for ensuring the safety and functionality of their smart contracts, while promoting innovation in blockchain technology.</li> </ul>"},{"location":"#platform-highlights","title":"Platform Highlights","text":"<ol> <li>User-Centric Design: A seamless interface that caters to developers, auditors, and organizations.  </li> <li>Security Analysis: Detects vulnerabilities such as reentrancy, integer overflows, and underflows.  </li> <li>Certification: Provides verifiable security scores and certificates for smart contracts.  </li> <li>Extensibility: Designed to integrate with third-party tools for enhanced functionality.</li> </ol>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Free Tier for Exploration: Users can upload contracts and obtain a basic security score without login.  </li> <li>Premium Features: Detailed analysis and certification are available post-login and payment.  </li> <li>Scalability: Built to handle high volumes of smart contracts efficiently.</li> </ul>"},{"location":"#why-cerify","title":"Why Cerify?","text":"<p>As blockchain adoption accelerates, the need for reliable and secure smart contracts becomes paramount. Cerify addresses these challenges by: - Automating the analysis of smart contracts to save time and resources. - Offering developers insights into potential vulnerabilities. - Building trust among stakeholders by certifying secure smart contracts.</p> <p>This documentation serves as a comprehensive guide to understanding Cerify\u2019s capabilities, architecture, and deployment strategy, supporting its implementation in both academic and industrial environments.</p>"},{"location":"#about-the-founder","title":"About the Founder","text":"<p>Subodh Vishnu Sharma Professor of Computer Science, IIT Delhi  </p> <p>Cerify was founded by Subodh Vishnu Sharma, a distinguished Professor of Computer Science at the prestigious Indian Institute of Technology, Delhi (IITD). With decades of experience in academia and research, Prof. Sharma specializes in blockchain security, distributed computing, and cryptographic systems. His vision for Cerify stems from a deep commitment to advancing blockchain technologies and ensuring their safe adoption across industries.</p>"},{"location":"#achievements-and-contributions","title":"Achievements and Contributions:","text":"<ul> <li>Published several research papers in leading journals and conferences on topics like blockchain security, formal verification, and decentralized computing.</li> <li>Supervised numerous Ph.D. and postgraduate scholars, contributing to cutting-edge advancements in computer science.</li> <li>Awarded the National Award for Excellence in Computer Science Research for contributions to blockchain and distributed ledger technologies.</li> <li>A member of international consortia and advisory boards for blockchain and cryptographic innovation.</li> </ul>"},{"location":"#vision-for-cerify","title":"Vision for Cerify:","text":"<p>Prof. Sharma envisions Cerify as a catalyst for trust in blockchain ecosystems, combining academic rigor with practical application. His leadership ensures that the platform remains at the forefront of technological innovation, setting benchmarks for smart contract verification and certification.</p>"},{"location":"#team-and-contributors","title":"Team and Contributors","text":"Debashish Sakunia <p>Bussiness Analyst</p> Aparna Nagpal <p>Frontend Developer</p> Priyanshu Yadav <p>Javascript Developer</p> Sanjana <p>Node.js Developer</p>"},{"location":"#how-to-contribute","title":"How to Contribute","text":"<ol> <li> <p>Bug Fixes: Identify, report, and fix bugs in the blockchain codebase. Review the code, test for vulnerabilities, report bugs with clear descriptions, and fix issues following project guidelines.</p> </li> <li> <p>Feature Development: Implement new features such as consensus algorithms or security enhancements. Work with maintainers to ensure alignment with the project goals, and write clean, well-documented code.</p> </li> <li> <p>Documentation: Help improve this documentation for better usability. Ensure code documentation is clear, concise, and update guides or API references when necessary.</p> </li> <li> <p>Testing: Write and improve test cases to ensure stability and scalability. Run regression, unit, and integration tests, ensuring comprehensive coverage and catching edge cases.</p> </li> </ol>"},{"location":"#open-source-collaboration","title":"Open-Source Collaboration","text":"<p>Cerify's repository is built for collaborative growth. Here\u2019s how you can start contributing:</p> <ol> <li>Fork and Clone: Start by forking the repository and cloning it locally.</li> <li>Explore the Code: Understand the architecture and existing modules.</li> <li>Issue Tracking: Browse open issues or create new ones to suggest improvements.</li> <li>Pull Requests: Create a pull request after implementing your changes, ensuring compliance with the contribution guidelines.</li> <li>Stay Updated: Follow the repository for the latest updates, releases, and discussions.</li> </ol>"},{"location":"#contributions-to-blockchain-research","title":"Contributions to Blockchain Research","text":"<ul> <li>Cerify's development is rooted in rigorous research on blockchain security. The team actively collaborates with the global research community to:</li> <li>Explore novel approaches for vulnerability detection in smart contracts.</li> <li>Develop advanced tools to analyze reentrancy attacks, overflow vulnerabilities, and other threats.</li> <li>Publish findings in leading journals and conferences, contributing to the academic and practical understanding of   blockchain technology.</li> </ul>"},{"location":"#why-join-us","title":"Why Join Us?","text":"<ul> <li>Collaborate with fellow developers passionate about blockchain.</li> <li>Work on challenging projects that push the boundaries of distributed systems.</li> <li>Contribute to an open-source project with real-world applications.</li> <li>Gain recognition and experience in blockchain development.</li> </ul>"},{"location":"Documentation/","title":"Cerify Systems: Frontend","text":""},{"location":"Documentation/#overview","title":"Overview","text":"<p>Cerify is a platform designed to enable users to upload and manage smart contracts with automated verification, scoring, and certification. The project integrates blockchain technology with modern backend and frontend frameworks to provide a seamless user experience while ensuring secure and efficient handling of smart contracts. This document provides an in-depth overview of the architecture, starting with the frontend and then the backend, and the technologies used in the development of Cerify. It serves as a guide for new developers to understand the codebase and contribute effectively.</p>"},{"location":"Documentation/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Frontend Overview<ul> <li>User Interface Design</li> <li>Functionalities and Workflow</li> <li>Communication with Backend</li> </ul> </li> <li>Backend Overview<ul> <li>User Management System</li> <li>Smart Contract Handling</li> <li>AI Model Integration</li> <li>Blockchain Interaction</li> </ul> </li> <li>Technologies Used</li> <li>Code Examples and API References</li> <li>System Design and Architecture</li> <li>Future Prospects</li> </ol>"},{"location":"Documentation/#frontend-overview","title":"Frontend Overview","text":""},{"location":"Documentation/#1-user-interface-design","title":"1. User Interface Design","text":"<p>The frontend of Cerify is designed with React, ensuring a modular and responsive user experience. The interface is built to guide users seamlessly through the process of uploading, analyzing, and retrieving smart contract reports.</p>"},{"location":"Documentation/#key-components","title":"Key Components:","text":"<ul> <li>Authentication Pages:</li> <li>Login, Signup, and Role-Based Access Control (RBAC) forms.</li> <li>Responsive design for desktop and mobile users.</li> <li>Dashboard:</li> <li>Displays uploaded contracts, their statuses, and report details.</li> <li>Payment history and user account management.</li> <li>Contract Upload Page:</li> <li>Interface to upload .sol files (Solidity contracts).</li> <li>Real-time feedback on upload status and AI-generated scores.</li> <li>Report Viewer:</li> <li>Allows users to download and view detailed reports.</li> </ul>"},{"location":"Documentation/#sample-react-code-authentication","title":"Sample React Code: Authentication","text":"<pre><code>import React, { useState } from \"react\";\nimport { auth } from \"../firebaseConfig\";\n\nconst Login = () =&gt; {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleLogin = async () =&gt; {\n    try {\n      await auth.signInWithEmailAndPassword(email, password);\n      alert(\"Login Successful\");\n    } catch (error) {\n      console.error(error);\n      alert(\"Login Failed\");\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Login&lt;/h1&gt;\n      &lt;input\n        type=\"email\"\n        placeholder=\"Email\"\n        value={email}\n        onChange={(e) =&gt; setEmail(e.target.value)}\n      /&gt;\n      &lt;input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) =&gt; setPassword(e.target.value)}\n      /&gt;\n      &lt;button onClick={handleLogin}&gt;Login&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Login;\n</code></pre>"},{"location":"Documentation/#2-functionalities-and-workflow","title":"2. Functionalities and Workflow","text":""},{"location":"Documentation/#pre-login-functionalities","title":"Pre-Login Functionalities:","text":"<ul> <li>Smart Contract Upload:</li> <li>Users can upload a Solidity (.sol) file to receive an initial AI-generated score.</li> <li>Score Display:</li> <li>Basic contract scores are displayed without login; detailed analysis requires user authentication.</li> </ul>"},{"location":"Documentation/#post-login-functionalities","title":"Post-Login Functionalities:","text":"<ul> <li>Dashboard Access:</li> <li>Displays all uploaded contracts with their statuses and generated reports.</li> <li>Report Generation and Download:</li> <li>Detailed reports are available after payment and additional processing.</li> </ul>"},{"location":"Documentation/#communication-with-backend","title":"Communication with Backend:","text":"<p>Frontend communicates with the backend using REST APIs and WebSocket connections for real-time updates. API requests handle user authentication, contract uploads, and report retrieval.</p>"},{"location":"Documentation/#backend-overview","title":"Backend Overview","text":""},{"location":"Documentation/#1-user-management-system","title":"1. User Management System","text":""},{"location":"Documentation/#key-responsibilities","title":"Key Responsibilities:","text":"<ul> <li>User authentication and authorization.</li> <li>Role-based access control (RBAC).</li> <li>Secure session management.</li> </ul>"},{"location":"Documentation/#implementation-details","title":"Implementation Details:","text":"<ul> <li>Authentication: Handled by Firebase Authentication for secure and scalable user credential management.</li> <li>Session Tokens: Generated and validated on each request to ensure secure access to resources.</li> </ul>"},{"location":"Documentation/#code-examples","title":"Code Examples:","text":"<pre><code>// Firebase Authentication Example\nconst firebaseAuth = require(\"firebase/auth\");\n\nconst signupUser = async (email, password) =&gt; {\n  try {\n    const userCredential = await firebaseAuth.createUserWithEmailAndPassword(email, password);\n    console.log(\"User Signed Up: \", userCredential.user);\n  } catch (error) {\n    console.error(\"Error Signing Up: \", error);\n  }\n};\n\nconst loginUser = async (email, password) =&gt; {\n  try {\n    const userCredential = await firebaseAuth.signInWithEmailAndPassword(email, password);\n    console.log(\"User Logged In: \", userCredential.user);\n  } catch (error) {\n    console.error(\"Error Logging In: \", error);\n  }\n};\n</code></pre>"},{"location":"Documentation/#2-smart-contract-handling","title":"2. Smart Contract Handling","text":""},{"location":"Documentation/#key-responsibilities_1","title":"Key Responsibilities:","text":"<ul> <li>Parsing and analyzing uploaded contracts.</li> <li>AI-based scoring and vulnerability checks.</li> </ul>"},{"location":"Documentation/#implementation-details_1","title":"Implementation Details:","text":"<ul> <li>Storage: Contracts are uploaded to Firebase Storage or AWS S3.</li> <li>Processing: Custom models analyze contracts for security risks, performance, and scalability.</li> </ul>"},{"location":"Documentation/#technologies-used","title":"Technologies Used","text":"<ul> <li>Frontend: React, Firebase Hosting</li> <li>Backend: Node.js, Firebase Functions, AWS VMs</li> <li>Database: Firestore, MongoDB</li> <li>Blockchain Libraries: Web3.js, Ethers.js</li> </ul>"},{"location":"Documentation/#system-design-and-architecture","title":"System Design and Architecture","text":""},{"location":"Documentation/#high-level-architecture","title":"High-Level Architecture:","text":"<ol> <li>Frontend: Handles user interaction and uploads .sol files to Firebase.</li> <li>Firebase: Acts as a middleware for authentication and triggers AWS processing.</li> <li>AWS Backend: Processes contracts, interacts with the blockchain, and generates reports.</li> </ol>"},{"location":"Documentation/#future-prospects","title":"Future Prospects","text":"<ul> <li>System Scalability: Design improvements for handling increased user loads.</li> <li>Chatbot Integration: For user support.</li> <li>Machine Learning Integration: Enhanced contract analysis.</li> </ul> <p>This document serves as a foundational guide for developers to understand and contribute to the Cerify project. For further details, refer to the codebase and associated API documentation.</p>"},{"location":"Future%20Enhancements/","title":"Future Enhancements for Cerify","text":"<p>Cerify is at the forefront of smart contract security and certification. To keep pace with rapid technological advancements and evolving security requirements, the following enhancements have been envisioned. This document outlines our roadmap for future improvements, ensuring that Cerify remains a cutting-edge platform for blockchain developers, auditors, and organizations.</p>"},{"location":"Future%20Enhancements/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Enhancement Areas</li> <li>1. Multi-Blockchain Support</li> <li>2. Advanced Vulnerability Analysis</li> <li>3. CI/CD and DevOps Integration</li> <li>4. Enhanced Reporting and Dashboard</li> <li>5. Improved User Experience</li> <li>6. Plugin and Extension Ecosystem</li> <li>7. Smart Contract Lifecycle Management</li> <li>8. Community Collaboration and Governance</li> <li>9. AI-Driven Security Analysis</li> <li>10. Expanded Language and Framework Support</li> <li>11. API and SDK Enhancements</li> <li>Roadmap and Timeline</li> <li>Conclusion</li> </ul>"},{"location":"Future%20Enhancements/#overview","title":"Overview","text":"<p>Cerify\u2019s mission is to establish trust and transparency in blockchain ecosystems by ensuring the security and reliability of smart contracts. As blockchain technology evolves, so do the challenges related to contract vulnerabilities and system integration. Our vision for the future includes a range of enhancements to cater to modern development practices, increased user requirements, and advanced security challenges.</p>"},{"location":"Future%20Enhancements/#enhancement-areas","title":"Enhancement Areas","text":""},{"location":"Future%20Enhancements/#1-multi-blockchain-support","title":"1. Multi-Blockchain Support","text":"<ul> <li>Objective: Extend Cerify's capabilities beyond Ethereum to include other leading blockchain platforms.</li> <li>Details:</li> <li>Support for blockchains such as Binance Smart Chain, Polkadot, Solana, and more.</li> <li>Integration with platform-specific smart contract languages and standards.</li> <li>Cross-chain verification and interoperability assessments.</li> <li>Benefits: Broader market reach, increased versatility, and support for diverse blockchain ecosystems.</li> </ul>"},{"location":"Future%20Enhancements/#2-advanced-vulnerability-analysis","title":"2. Advanced Vulnerability Analysis","text":"<ul> <li>Objective: Enhance the current security analysis engine to detect a broader range of vulnerabilities.</li> <li>Details:</li> <li>Implementation of static and dynamic analysis techniques.</li> <li>Incorporation of state-of-the-art research on emerging vulnerabilities (e.g., flash loan attacks, oracle manipulation).</li> <li>Continuous update mechanism for vulnerability databases.</li> <li>Benefits: More comprehensive security assessments, reduced risk of exploitation, and up-to-date vulnerability detection.</li> </ul>"},{"location":"Future%20Enhancements/#3-cicd-and-devops-integration","title":"3. CI/CD and DevOps Integration","text":"<ul> <li>Objective: Streamline the development and deployment workflow for smart contract development.</li> <li>Details:</li> <li>Plugins and integrations with popular CI/CD tools (GitHub Actions, GitLab CI, Jenkins).</li> <li>Automated verification on code commit and pull request events.</li> <li>Dashboard notifications and integration with project management tools.</li> <li>Benefits: Faster detection of vulnerabilities during development, improved team collaboration, and enhanced workflow automation.</li> </ul>"},{"location":"Future%20Enhancements/#4-enhanced-reporting-and-dashboard","title":"4. Enhanced Reporting and Dashboard","text":"<ul> <li>Objective: Provide richer insights and actionable data from smart contract analyses.</li> <li>Details:</li> <li>Customizable dashboards with visualizations of security scores, trends, and historical data.</li> <li>Downloadable, detailed audit reports in multiple formats (PDF, JSON).</li> <li>Executive summaries, developer-specific feedback, and remediation suggestions.</li> <li>Benefits: Improved clarity in reports, easier integration into enterprise systems, and more informed decision-making.</li> </ul>"},{"location":"Future%20Enhancements/#5-improved-user-experience","title":"5. Improved User Experience","text":"<ul> <li>Objective: Enhance the platform's UI/UX to make it even more user-friendly and accessible.</li> <li>Details:</li> <li>Redesign of the interface with a focus on intuitive navigation and accessibility.</li> <li>Responsive design for mobile and tablet devices.</li> <li>Interactive tutorials, tooltips, and comprehensive documentation.</li> <li>Benefits: Increased user satisfaction, reduced learning curve, and broader adoption across skill levels.</li> </ul>"},{"location":"Future%20Enhancements/#6-plugin-and-extension-ecosystem","title":"6. Plugin and Extension Ecosystem","text":"<ul> <li>Objective: Foster a vibrant ecosystem where third-party developers can build custom extensions.</li> <li>Details:</li> <li>Open API and SDK for plugin development.</li> <li>A centralized marketplace for community-developed tools and extensions.</li> <li>Verification and certification process for third-party plugins.</li> <li>Benefits: Accelerated feature expansion, community engagement, and a platform tailored to specific developer needs.</li> </ul>"},{"location":"Future%20Enhancements/#7-smart-contract-lifecycle-management","title":"7. Smart Contract Lifecycle Management","text":"<ul> <li>Objective: Extend Cerify's functionality to support the entire lifecycle of smart contracts.</li> <li>Details:</li> <li>Version control integration for contract updates.</li> <li>Continuous monitoring of deployed contracts for new vulnerabilities.</li> <li>Tools for managing contract upgrades and deprecation.</li> <li>Benefits: Better management of contract evolution, proactive security monitoring, and improved contract reliability.</li> </ul>"},{"location":"Future%20Enhancements/#8-community-collaboration-and-governance","title":"8. Community Collaboration and Governance","text":"<ul> <li>Objective: Engage the community in shaping the future of Cerify.</li> <li>Details:</li> <li>Establishment of a decentralized governance model for decision-making.</li> <li>Community feedback portals, bug bounty programs, and open forums.</li> <li>Regular webinars and workshops to share best practices and updates.</li> <li>Benefits: Increased transparency, community-driven innovation, and stronger user trust.</li> </ul>"},{"location":"Future%20Enhancements/#9-ai-driven-security-analysis","title":"9. AI-Driven Security Analysis","text":"<ul> <li>Objective: Leverage artificial intelligence and machine learning to augment vulnerability detection.</li> <li>Details:</li> <li>Implementation of AI algorithms to identify patterns and predict potential vulnerabilities.</li> <li>Training models on historical contract data and known exploits.</li> <li>Real-time anomaly detection and adaptive learning systems.</li> <li>Benefits: Faster, more accurate vulnerability assessments and the ability to adapt to new threat vectors.</li> </ul>"},{"location":"Future%20Enhancements/#10-expanded-language-and-framework-support","title":"10. Expanded Language and Framework Support","text":"<ul> <li>Objective: Support smart contract development in multiple languages and frameworks.</li> <li>Details:</li> <li>Beyond Solidity: Support for Vyper, Rust (for Solana), and other emerging languages.</li> <li>Framework-specific enhancements for Truffle, Hardhat, and others.</li> <li>Tools for automatic code conversion and compatibility checks.</li> <li>Benefits: Broader developer base, increased flexibility, and improved cross-platform security.</li> </ul>"},{"location":"Future%20Enhancements/#11-api-and-sdk-enhancements","title":"11. API and SDK Enhancements","text":"<ul> <li>Objective: Provide robust APIs and developer tools for seamless integration.</li> <li>Details:</li> <li>Comprehensive REST and GraphQL APIs for third-party integrations.</li> <li>Detailed SDKs in popular programming languages (JavaScript, Python, etc.).</li> <li>Enhanced documentation, sample projects, and integration guides.</li> <li>Benefits: Easier integration into existing development pipelines, improved developer productivity, and accelerated adoption of Cerify.</li> </ul>"},{"location":"Future%20Enhancements/#roadmap-and-timeline","title":"Roadmap and Timeline","text":"<ul> <li>Phase 1: Immediate (0-6 months)</li> <li>Refine core vulnerability analysis engine.</li> <li>Implement initial CI/CD integrations and dashboard improvements.</li> <li> <p>Launch enhanced API documentation and SDKs.</p> </li> <li> <p>Phase 2: Near Future (6-12 months)</p> </li> <li>Roll out multi-blockchain support for top-tier networks.</li> <li>Introduce community collaboration features and plugin ecosystem.</li> <li> <p>Begin initial trials of AI-driven security modules.</p> </li> <li> <p>Phase 3: Long-Term (12-24 months)</p> </li> <li>Expand support to additional smart contract languages and frameworks.</li> <li>Integrate comprehensive smart contract lifecycle management tools.</li> <li>Launch full decentralized governance model and community bounty programs.</li> </ul>"},{"location":"Future%20Enhancements/#conclusion","title":"Conclusion","text":"<p>The future of Cerify is rooted in continuous innovation and community collaboration. By focusing on multi-blockchain support, advanced security analysis, seamless integration with modern development workflows, and robust community engagement, Cerify is poised to become the standard-bearer for smart contract verification and certification. These enhancements will not only drive the security and reliability of blockchain applications but also foster a dynamic ecosystem that adapts to the evolving landscape of decentralized technology.</p> <p>For further inquiries or to contribute to the roadmap, please reach out to the Cerify development team or join our community forums.</p>"},{"location":"Security%20Best%20Practices/","title":"Cerify Backend Architecture &amp; Deployment Guide","text":"<p>Cerify is an advanced blockchain-based platform for analyzing, verifying, and certifying smart contracts. This guide explains our complete microservices architecture, including the Firestore-backed authentication and database service, and the AWS-based model inference service. The architecture is designed to be modular, scalable, and secure, enabling seamless integration between backend services and the frontend.</p>"},{"location":"Security%20Best%20Practices/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Architecture Overview</li> <li>Firestore Setup &amp; Authentication Service</li> <li>Prerequisites</li> <li>Configuration (firebaseConfig.js)</li> <li>User Signup &amp; Login API (server.js)</li> <li>AWS Model Inference Service</li> <li>AWS Lambda Function Setup</li> <li>Lambda Code Example (lambda_function.js)</li> <li>Deployment Instructions</li> <li>Frontend Integration</li> <li>Fetching Analysis Results (fetchResults.js)</li> <li>Microservices Communication Flow</li> <li>Additional Considerations</li> <li>Conclusion</li> </ul>"},{"location":"Security%20Best%20Practices/#overview","title":"Overview","text":"<p>Cerify's backend is built on a microservices architecture that separates user authentication and data management from the computationally intensive smart contract analysis. This design ensures that each service can be scaled independently while maintaining secure and reliable data exchange.</p>"},{"location":"Security%20Best%20Practices/#architecture-overview","title":"Architecture Overview","text":"<ol> <li>Authentication &amp; Database Service (Firestore): </li> <li>Manages user signup, login, and stores user profiles, smart contract submissions, and analysis results.</li> <li> <p>Utilizes Firebase Firestore, a scalable NoSQL document database.</p> </li> <li> <p>Model Inference Service (AWS): </p> </li> <li>Hosts the smart contract security model as a serverless AWS Lambda function.</li> <li>Processes submitted contracts, generates security analysis, and saves the results back to Firestore.</li> <li> <p>Exposes a REST API via AWS API Gateway.</p> </li> <li> <p>Frontend Integration: </p> </li> <li>Users interact with the frontend to register, submit contracts, and view analysis reports.</li> <li>The frontend communicates with both backend services to perform authentication and fetch results.</li> </ol>"},{"location":"Security%20Best%20Practices/#firestore-setup-authentication-service","title":"Firestore Setup &amp; Authentication Service","text":""},{"location":"Security%20Best%20Practices/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Firebase project with Firestore enabled in Native mode.</li> <li>Node.js installed for running the backend server.</li> <li>Firebase SDK installed in your Node.js project.</li> </ul>"},{"location":"Security%20Best%20Practices/#configuration-firebaseconfigjs","title":"Configuration (firebaseConfig.js)","text":"<p>Create a file named <code>firebaseConfig.js</code> to initialize Firebase and Firestore:</p> <p><pre><code>// firebaseConfig.js\nconst firebase = require(\"firebase/app\");\nrequire(\"firebase/auth\");\nrequire(\"firebase/firestore\");\n\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"yourproject.firebaseapp.com\",\n  projectId: \"yourproject-id\",\n  storageBucket: \"yourproject.appspot.com\",\n  messagingSenderId: \"YOUR_SENDER_ID\",\n  appId: \"YOUR_APP_ID\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nmodule.exports = { firebase, auth, firestore };\n</code></pre> User Login and Signup // server.js const express = require(\"express\"); const { auth, firestore } = require(\"./firebaseConfig\"); const app = express();</p> <p>app.use(express.json());</p> <p>// Signup endpoint app.post(\"/signup\", async (req, res) =&gt; {   try {     const { email, password, name } = req.body;     const userCredential = await auth.createUserWithEmailAndPassword(email, password);     const user = userCredential.user;</p> <pre><code>// Save additional user information in Firestore\nawait firestore.collection(\"users\").doc(user.uid).set({\n  name,\n  email,\n  createdAt: new Date(),\n});\n\nres.status(201).json({ message: \"User created successfully\", uid: user.uid });\n</code></pre> <p>} catch (error) {     res.status(400).json({ error: error.message });   } });</p> <p>// Login endpoint app.post(\"/login\", async (req, res) =&gt; {   try {     const { email, password } = req.body;     const userCredential = await auth.signInWithEmailAndPassword(email, password);     const user = userCredential.user;     res.status(200).json({ message: \"Login successful\", uid: user.uid });   } catch (error) {     res.status(400).json({ error: error.message });   } });</p> <p>const PORT = process.env.PORT || 3000; app.listen(PORT, () =&gt; {   console.log(<code>Auth service listening on port ${PORT}</code>); });  </p>"}]}